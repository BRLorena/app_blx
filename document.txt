Modelagem da Base de dados (Camada de modelos)
Pydantic Model - https://pydantic-docs.helpmanual.io/usage/models/ 
path: /models/models.py

Classes:
- Pessoa
- Peoduto
- Pedido
_________________________________________________________________________
Estrtutura do Projeto:
* src/infra/sqlalchemy
  - config (configuração com o db)  -> database.py
  - models (representação das tabelas) -> models.py
  - repositorios (acessa o banco de dados) -> produto.py
* src/router
* src/schema (utilizado P/ request e response) -> schemas.py
  - Dentro da class produto criei outra class que a partir de um model criará um schema
* src/services
* src/utils
* src/server.py -> onde ficará a app (Route/Controller)
  import as classes necessárias (Repositorios/produto.py , schemas/schemas.py e sqlalchemy/config/database.py)
  import Depends do FastAPI que ele me ajuda a buscar o method  get_db()
* src/banco_blx.db

1. Separar preocupações
2. Camadas principais: Controller -> Lógica -> Persistencia de dados
3. Beneficios: 
  a. Facilidade de evolução
  b. Trabalho em equipe
  c. Redução de efeitos Colaterais
  d. Projeto grande
_____________________________________________________________________________
Design Framework:
App --> Request --> Schema --> Route/Controller --> Serviços(Lógica) --> 
Repositorio(Acesso aos dados) --> modelos --> DB
++img
________________________________________________________________________________

ORM: Manipula a informação P/ o banco de dados
sqlalchemy - https://www.sqlalchemy.org/ 
pip install SQLAlchemy==1.4.7 -> install ORM

____________________________________________________________________________________
Atualizado as rotas dos diretorios P/ importar as classes.
A partir de agora desenv. a partir do dir do projeto.. (app_blx)

-------------------------------------------------------------------------------
step by step 
1. Criar um schema (class e atributos) utilizado para criar a estrutura da API
2. Criar o models (class e atributos) estrutura do bd
3. Criar repositorios (cada class tem um repositorio) responsavel por comunicar com a db
3. Criar rota no server.
  ex: 
  @app.get("/usuarios", status_code=200) -> criar metodo c/ anotação @app.METHOD
  def listar_usuarios(db: Session = Depends(get_db)): -> requires (instancia da db)
    usuarios = RepositorioUsuario(db).listar() -> Repositorio, reponsavel por executar as querys 
    return usuarios -> retorna o obj.
--------------------------------------------------------------------------------------------------
